#!/usr/bin/env python3

#Advent of Code
#2024 Day 22, Part 1
#Solution by James C. (https://github.com/JamesMCo)

import os, sys
sys.path.append(os.path.abspath("../.."))
import unittest, util.read
from util.tests import run

def solve(puzzle_input: list[int]) -> int:
    # Steps to evolve a secret number:
    # Multiply by 64, mix, and prune   => left shift 6,  XOR with original, AND with 16777215
    # Divide by 32, mix, and prune     => right shift 5, XOR with original, AND with 16777215
    # Multiply by 2048, mix, and prune => left shift 11, XOR with original, AND with 16777215
    def evolve(original: int) -> int:
        working = ((original << 6) ^ original) & 16777215
        working = ((working >> 5) ^ working) & 16777215
        return ((working << 11) ^ working) & 16777215

    def generate(n: int) -> int:
        working = n
        for _ in range(2000):
            working = evolve(working)
        return working

    return sum(map(generate, puzzle_input))

def main() -> tuple[str, int]:
    puzzle_input = util.read.as_int_list("\n")

    return "The sum of the 2000th secret number generated by each buyer is {}.", solve(puzzle_input)

class AOC_Tests(unittest.TestCase):
    def test_ex1(self):
        return self.assertEqual(solve([1, 10, 100, 2024]), 37327623)

if __name__ == "__main__":
    run(main)
